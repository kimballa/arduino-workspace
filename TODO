
Makefile:
------------


Debugger:
------------

On-device service capabilities:

Client:
  * Use alternative readline interface (see readline manual sec 2.4.12 and .14) to enable
    us to listen on serial connection as well as handle readline input simultaneously.

    * Eliminate set_process_state() - only needed to bump offline debugger into break mode.
    * Most debugger methods need a way to ensure process state is in BREAK before communicating cmds

    * Make sure that when dump creates a new debugger, it properly attaches the print_q.


  * Can we implement a 'setlocal' ?
    * Would need to use call frame info to determine where on the stack it lives...
      or where on the stack frame above the local the register got saved.

  * Lots of methods named None. Data parse error? Or just need to clean up formatting?
    Examples:

			2. 149a: I2CParallel::getByte()  (twi.c:219)

			I2CParallel::getByte() and a bunch of inlined TwoWire member methods have 'public void None'
			signatures in `locals` -- failing to get type/name from abstract origin, maybe?



			4. 0d4a: NewhavenLcd0440::_scrollScreen()  (NewhavenLcd0440.cpp:296)
			(adbg) locals 4
			Method scope: public void None()

		* Some formal args don't have names and report "void foo(<sometype> None, ...)"
    Get the name? At minimum, clean up the formatting?

	* Need to implement GNU extensions to DW_OP list. e.g.:

			3. 14d8: I2C4BitNhdByteSender::readByte(unsigned char, unsigned char)
					(I2C4BitNhdByteSender.cpp:73)

			Error running 'locals': Unimplemented DWARF expr op='DW_OP_GNU_entry_value'
					args=[[DWARFExprOp(op=102, op_name='DW_OP_reg22', args=[])]]

  * add notion of "current frame" that can be adjusted rather than just as immediate arg
    to `frame` / `\f`
  * Link type information for methods & variables to Symbols in Debugger initialization
    after parsing dwarf_info().
  * types.py should handle union type? bit fields?
  * Filter __dbg_service and __vector17 out of stack trace report and `frame` commands?

  * Optionally embed ELF file in core dump file, for all-in-one dump file w/o separate .elf.
  * Use image dumps for integration testing. 
    Set up BREAK() statements in various strategic places to set up different test cases.

SAM D21 support: (See Cortex-M0+ Technical Reference Manual)
* Breakpoint unit support
* Watchpoint unit support
* Single-step support
* ... cleaner backtrace via ARM-standard frame pointer record walking.


