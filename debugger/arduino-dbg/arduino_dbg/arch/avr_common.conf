# Atmel AVR ATmega32u4
#

instruction_set = "avr"

RAMSTART = 0x100
SPL_PORT = 0x3d # SPL defined in common; SPH defined for architectures with has_sph=True

# Addresses in .data are at 0x800xxx in the ELF but just `xxx` on-chip.
DATA_ADDR_MASK = 0xFF7FFFFF

default_op_width = 2   # Standard opcode width to fetch/decode.

push_word_len = 1      # Each PUSH (POP) operation adds (subtracts) this many bytes to SP
ret_addr_size = 2      # Each CALL operation adds this many bytes to stack for return addr.


### AVR-specific opcode decoder functions ###

def __io_addr_reg(op):
  """
    Return the i/o port address 'A' and register Rr/Rd from a 2-byte IN or OUT opcode sequence
  """
  AVR_IO_IN_ADDR_MASK = 0x060F # mask for 'A' address for opcode `IN Rd,A`. nb non-contiguous
  addr_part = op & AVR_IO_IN_ADDR_MASK
  addr = ((addr_part >> 5) & 0x0030) | (addr_part & 0x0F)

  AVR_IO_IN_REG_MASK = 0x01F0
  reg_part = op & AVR_IO_IN_REG_MASK
  reg = (reg_part >> 4) & 0x01F
  return (addr, reg)
 
def __sbiw_rd_i(op):
  """
    Decode and return the 'Rd' and 'immediate' arguments of a SBIW opcode
  """
  AVR_SBIW_RD_MASK = 0x0030
  AVR_SBIW_CONST_MASK = 0x00CF

  imm_part = op & AVR_SBIW_CONST_MASK
  imm = ((imm_part >> 2) & 0x30) | (imm_part & 0xF)

  # rd_part is 2 bits and indicates r24, 26, 28, or 30
  rd_part = (op & AVR_SBIW_RD_MASK) >> 4
  rd = (2 * rd_part) + 24

  return (rd, imm)


def __subi_rd_i(op):
  """
    Return Rd and immediate parts from a SUBI opcode.
  """
  AVR_SUBI_RD_MASK = 0x00F0
  AVR_SUBI_CONST_MASK = 0x0F0F

  imm_part = op & AVR_SUBI_CONST_MASK
  imm = ((imm_part >> 4) & 0xF0) | (imm_part & 0xF)

  # rd_part is 4 bits and indicates 16 <= Rd <= 31
  rd_part = (op & AVR_SUBI_RD_MASK) >> 4
  rd = 16 + rd_part

  return (rd, imm)




# Helper function to assemble opcode decoder record
def __mk_opcode_rec(name, opcode, mask=0xFFFF, width=2, decoder=None):
  return {
    'name'    : name,
    'OPCODE'  : opcode,
    'MASK'    : mask,
    'width'   : width,
    'decoder' : decoder,
  }

# Opcodes that can occur within prologue 
prologue_opcodes = [
  __mk_opcode_rec('push', 0x920F, 0xFE0F),
  __mk_opcode_rec('pop',  0x900F, 0xFE0F),
  __mk_opcode_rec('nop',  0x0),
  __mk_opcode_rec('eor',  0x2400, 0xFC00),
  __mk_opcode_rec('in',   0xB000, 0xF800, 2, __io_addr_reg),
  __mk_opcode_rec('out',  0xB800, 0xF800, 2, __io_addr_reg),
  __mk_opcode_rec('cli',  0x94F8),
  __mk_opcode_rec('sei',  0x9478),
  __mk_opcode_rec('sbiw', 0x9700, 0xFF00, 2, __sbiw_rd_i),
  __mk_opcode_rec('subi', 0x5000, 0xF000, 2, __subi_rd_i),
]

